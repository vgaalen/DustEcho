#!/usr/bin/env python
# -*- coding: utf8 -*-
# *****************************************************************
# **       PTS -- Python Toolkit for working with SKIRT          **
# **       Â© Astronomical Observatory, Ghent University          **
# *****************************************************************

## \package pts.do.initialize Initialize PTS logging and matplotlib backend depending on use case
#
# This module offers facilities for initializing the PTS package depending on the way it is being invoked.
# Specifically, the logging and matplotlib backend are configured appropriately.
# The functions in this module are not intended to be called by users directly.

# -----------------------------------------------------------------

## This function configures the PTS package depending on the way it will be invoked.
# Specifically, the logging and matplotlib backend are configured appropriately.
#
# By default, logging is configured for terminal command line use, i.e. including a time stamp.
# If \em prompt is True, logging is configured for interactive prompt use, i.e. without a time stamp.
#
def initializePTS(prompt = False):

    ## this class overrides the logging formatter to adjust the format for the message level.
    import logging
    class CommandLineLoggingFormatter(logging.Formatter):
        def format(self, record):
            line = super().format(record)

            # replace message level indicators
            line = line.replace("<DEBUG>", ".", 1)
            line = line.replace("<INFO>", " ", 1)
            line = line.replace("<WARNING>", "!", 1)
            line = line.replace("<ERROR>", "* ERROR:", 1)
            line = line.replace("<CRITICAL>", "* CRITICAL ERROR:", 1)

            # provide prefix for all lines in a multi-line message such as generated by the warnings module
            if line.endswith(('\n', '\r')):
                prefixlength = 3 if line.startswith(' ') else 26
                prefix = line[:prefixlength]
                lines = line.splitlines()
                line = "\n".join([lines[0]] + [prefix + lin for lin in lines[1:]])

            return line

    # configure logging facilities for use from the interactive Python prompt or from the Terminal command line
    if prompt:
        formatter = CommandLineLoggingFormatter(fmt=' <%(levelname)s> %(message)s')
    else:
        formatter = CommandLineLoggingFormatter(fmt='%(asctime)s.%(msecs)03d <%(levelname)s> %(message)s',
                                                datefmt='%d/%m/%Y %H:%M:%S')
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    logging.root.addHandler(handler)
    logging.root.setLevel(logging.INFO)
    logging.captureWarnings(True)

    # configure matplotlib with the non-interactive PDF backend
    import matplotlib
    matplotlib.use("pdf")

    # set the PTS interactive mode
    import pts.utils as ut
    ut.setInteractive(prompt)

# -----------------------------------------------------------------
